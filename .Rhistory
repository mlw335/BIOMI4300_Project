knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
fig.path = "../figures/01_DADA2")
# any number can be chosen
set.seed(238428)
#Efficiently load w/ pacman
pacman::p_load(tidyverse, dada2, phyloseq, DT, devtools, install = FALSE)
#set the path
raw_fastqs_path <- "data/01_DADA2/01_raw_gzipped_fastqs"
raw_fastqs_path
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(list.files(raw_fastqs_path))
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
#what files are in the path?
head(list.files(raw_fastqs_path))
#set the path
raw_fastqs_path <- "data/01_DADA2/01_raw_gzipped_fastqs"
raw_fastqs_path
#what files are in the path?
head(list.files(raw_fastqs_path))
#set the path
raw_fastqs_path <- "data/*.fastq.gz"
raw_fastqs_path
#what files are in the path?
head(list.files(raw_fastqs_path))
#set the path
raw_fastqs_path <- "data/"
raw_fastqs_path
#what files are in the path?
head(list.files(raw_fastqs_path))
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data/"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = TRUE)
# Print the filtered list
fastq_files
#what files are in the path?
head(list.files(raw_fastqs_path))
# Print the filtered list
head(fastq_files)
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = TRUE)
# Print the filtered list
head(fastq_files)
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(list.files(fastq_files))
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
head(fastq_files)
#how many are there?
length(list.files(fastq_files))
#how many are there?
length(fastq_files)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
stopifnot(length(reverse_reads) < length(list.files(raw_fastqs_path)))
stopifnot(length(forward_reads) == length(reverse_reads))
```{r raw-quality-plot, fig.width=12, fig.height=8}
print(forward_reads)
print(reverse_reads)
#randomly select 12 samples
random_samples <- sample(1:length(reverse_reads), size = 12)
random_samples
#forward quality plot
forward_filtered_qual_plot_12 <-
plotQualityProfile(forward_reads[random_samples]) +
labs(title = "Forward Reads: Raw Quality")
#reverse quality plot
reverse_filtered_qual_plot_12 <-
plotQualityProfile(reverse_reads[random_samples]) +
labs(title = "Reverse Reads: Raw Quality")
View(forward_filtered_qual_plot_12)
# put the two plots together
forward_filtered_qual_plot_12 + reverse_filtered_qual_plot_12
# put the two plots together
forward_filtered_qual_plot_12
reverse_filtered_qual_plot_12
# Aggregate all QC plots
# Forward reads
forward_preQC_plot <-
plotQualityProfile(forward_reads, aggregate = TRUE) +
labs(title = "Forward Pre-QC")
#set the path
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
head(fastq_files)
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(fastq_files)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
print(forward_reads)
print(reverse_reads)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
print(forward_reads)
print(reverse_reads)
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
fig.path = "../figures/01_DADA2")
# any number can be chosen
set.seed(238428)
#Efficiently load w/ pacman
pacman::p_load(tidyverse, dada2, phyloseq, DT, devtools, install = FALSE)
#set the path
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
head(fastq_files)
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(fastq_files)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
print(forward_reads)
print(reverse_reads)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
print(forward_reads)
print(reverse_reads)
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
head(fastq_files)
# Print the filtered list
head(fastq_files)
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
fig.path = "../figures/01_DADA2")
# any number can be chosen
set.seed(238428)
#Efficiently load w/ pacman
pacman::p_load(tidyverse, dada2, phyloseq, DT, devtools, install = FALSE)
#set the path
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
head(fastq_files)
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(fastq_files)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
print(forward_reads)
print(reverse_reads)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
head(fastq_files)
# Print the filtered list
fastq_files
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
fig.path = "../figures/01_DADA2")
# any number can be chosen
set.seed(238428)
#Efficiently load w/ pacman
pacman::p_load(tidyverse, dada2, phyloseq, DT, devtools, install = FALSE)
#set the path
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "\\.fastq\\.gz$", full.names = FALSE)
# Print the filtered list
fastq_files
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(fastq_files)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
print(forward_reads)
print(reverse_reads)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
View(forward_filtered_qual_plot_12)
# Print the filtered list
fastq_files
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data"
raw_fastqs_path
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "*.fastq.gz", full.names = FALSE)
# Print the filtered list
fastq_files
raw_fastqs_path
# Define the path to your raw FASTQ files
raw_fastqs_path <- "data/"
raw_fastqs_path
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "*.fastq.gz", full.names = FALSE)
# Print the filtered list
fastq_files
pwd
dir()
dir(data)
dir(data/)
raw_fastqs_path
list.files("data")
pwd
list.files("/local/workdir/mlw335/BIOMI4300_Project/data")
# Define the path to your raw FASTQ files
raw_fastqs_path <- "/local/workdir/mlw335/BIOMI4300_Project/data"
raw_fastqs_path
# List only files that end with ".fastq.gz"
fastq_files <- list.files(path = raw_fastqs_path, pattern = "*.fastq.gz", full.names = FALSE)
# Print the filtered list
fastq_files
#what files are in the path?
head(list.files(raw_fastqs_path))
#how many are there?
length(fastq_files)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
print(forward_reads)
print(reverse_reads)
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = FALSE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = FALSE)
print(forward_reads)
print(reverse_reads)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
stopifnot(length(reverse_reads) < length(list.files(raw_fastqs_path)))
stopifnot(length(forward_reads) == length(reverse_reads))
# Visualize/inspect seq. data to assess read quality
Lets see the quality of the raw reads *BEFORE* we trim our sequences
#randomly select 12 samples
random_samples <- sample(1:length(reverse_reads), size = 12)
random_samples
#forward quality plot
forward_filtered_qual_plot_12 <-
plotQualityProfile(forward_reads[random_samples]) +
labs(title = "Forward Reads: Raw Quality")
#create vector of forward reads (R1)
forward_reads <- list.files(raw_fastqs_path, pattern = "1.fastq.gz", full.names = TRUE)
#create vector of reverse reads (R2)
reverse_reads <- list.files(raw_fastqs_path, pattern = "2.fastq.gz", full.names = TRUE)
print(forward_reads)
print(reverse_reads)
#intuition check
stopifnot(length(forward_reads) < length(list.files(raw_fastqs_path)))
stopifnot(length(reverse_reads) < length(list.files(raw_fastqs_path)))
stopifnot(length(forward_reads) == length(reverse_reads))
# Visualize/inspect seq. data to assess read quality
Lets see the quality of the raw reads *BEFORE* we trim our sequences
#forward quality plot
forward_filtered_qual_plot_12 <-
plotQualityProfile(forward_reads[random_samples]) +
labs(title = "Forward Reads: Raw Quality")
**[INSERT AN INTERPRETATION OF F AND R QUALITY PLOTS]**
# Aggregate all QC plots
# Forward reads
forward_preQC_plot <-
plotQualityProfile(forward_reads, aggregate = TRUE) +
labs(title = "Forward Pre-QC")
# Aggregate all QC plots
# Forward reads
forward_preQC_plot <-
plotQualityProfile(forward_reads, aggregate = TRUE) +
labs(title = "Forward Pre-QC")
# reverse reads
reverse_preQC_plot <-
plotQualityProfile(reverse_reads, aggregate = TRUE) +
labs(title = "Reverse Pre-QC")
View(forward_preQC_plot)
View(forward_preQC_plot)
View(forward_preQC_plot)
# Now, let's put the two plots together
preQC_aggregate_plot <-
# Plot the forward and reverse together
forward_preQC_plot + reverse_preQC_plot
forward_filtered_qual_plot_12
reverse_filtered_qual_plot_12
# Create vector of sample names from file
sample_names <- sapply(strsplit(basename(forward_reads), "_"), `[`, 1)
head(sample_names)
filtered_fastqs_path <- "data/"
# Intuition Check
filtered_fastqs_path
filtered_forward_reads <-
file.path(filtered_fastqs_path, paste0(sample_names, "_R1_filtered.fastq.gz"))
# Intuition Check
length(filtered_forward_reads)
#reverse reads
filtered_reverse_reads <-
file.path(filtered_fastqs_path, paste0(sample_names, "_R2_filtered.fastq.gz"))
# Intuition Check
head(filtered_reverse_reads)
filtered_fastqs_path <- "data"
# Intuition Check
filtered_fastqs_path
#forward reads
filtered_forward_reads <-
file.path(filtered_fastqs_path, paste0(sample_names, "_R1_filtered.fastq.gz"))
# Intuition Check
length(filtered_forward_reads)
#reverse reads
filtered_reverse_reads <-
file.path(filtered_fastqs_path, paste0(sample_names, "_R2_filtered.fastq.gz"))
# Intuition Check
head(filtered_reverse_reads)
#filter the reads
filtered_reads <-
filterAndTrim(fwd = forward_reads, filt = filtered_forward_reads,
rev = reverse_reads, filt.rev = filtered_reverse_reads,
maxN = 0, maxEE = c(2,2),
# Remove the first 8 bases at the beginning of the forward read
trimLeft = 8,
# Keep the full forward & trim final 2 bases in the reverse with truncLen
truncLen = c(250, 248),
truncQ = 2, rm.phix = TRUE, compress = TRUE,
# Please set threads to be 8-10 (we want to respect others using the server!)
# Note that if TRUE, it will use ALL threads (making it hard for others to use the server)
multithread = 10)
# Plot the 12 random samples after QC
forward_filteredQual_plot_12 <-
plotQualityProfile(filtered_forward_reads[random_samples]) +
labs(title = "Trimmed Forward Read Quality")
# Plot the 12 random samples after QC
forward_filteredQual_plot_12 <-
plotQualityProfile(filtered_forward_reads[random_samples]) +
labs(title = "Trimmed Forward Read Quality")
reverse_filteredQual_plot_12 <-
plotQualityProfile(filtered_reverse_reads[random_samples]) +
labs(title = "Trimmed Reverse Read Quality")
# Put the two plots together
forward_filteredQual_plot_12 + reverse_filteredQual_plot_12
forward_filtered_qual_plot_12
reverse_filtered_qual_plot_12
# Aggregate all QC plots
# Forward reads
forward_postQC_plot <-
plotQualityProfile(filtered_forward_reads, aggregate = TRUE) +
labs(title = "Forward Post-QC")
# Aggregate all QC plots
# Forward reads
forward_postQC_plot <-
plotQualityProfile(filtered_forward_reads, aggregate = TRUE) +
labs(title = "Forward Post-QC")
# reverse reads
reverse_postQC_plot <-
plotQualityProfile(filtered_reverse_reads, aggregate = TRUE) +
labs(title = "Reverse Post-QC")
# reverse reads
reverse_postQC_plot <-
plotQualityProfile(filtered_reverse_reads, aggregate = TRUE) +
labs(title = "Reverse Post-QC")
# Now, let's put the two plots together
postQC_aggregate_plot <-
# Plot the forward and reverse together
forward_postQC_plot + reverse_postQC_plot
# Make output into dataframe
filtered_df <- as.data.frame(filtered_reads) %>%
mutate(percent.retained = reads.out/reads.in)
# Intuition check
# Visualize it in table format
DT::datatable(filtered_df)
# Intuition check
# Visualize it in table format
DT::datatable(filtered_df)
```{r stats of df}
read_stats_df <-
filtered_df %>%
reframe(median_reads_in = median(reads.in),
median_reads_out = median(reads.out),
median_percent_retained = (median(reads.out)/median(reads.in)),
max_percent_retained = max(reads.out/reads.in),
min_percent_retained = min(reads.out/reads.in))
# Take a look at it!
read_stats_df
# Plot it
numSeqs_QC_dotplot <-
filtered_df %>%
ggplot(aes(x = reads.in, y = reads.out)) +
geom_point(alpha = 0.5, size = 2) +
labs(x = "# of Raw Seqs",
y = "# of Seqs Retained") +
# Now let's add a 1:1 line for reference of keeping 100% of the reads
geom_abline(slope=1, intercept = 0, color = "deeppink")
# Now, let's look at the number of reads retained in a histogram
numRetained_QC_histplot <-
filtered_df %>%
ggplot(aes(x = reads.out)) +
geom_histogram() +
labs(x = "# of Seqs Retained",
y = "# of Samples")
# Create a histogram of percent reads retained in a histogram
percSeqs_QC_histplot <-
filtered_df %>%
ggplot(aes(x = percent.retained)) +
geom_histogram() +
labs(x = "% of Seqs Retained",
y = "# of Samples") +
# Set the scale to be between 0-1 (0-100%)
scale_x_continuous(limits = c(0, 1))
# Now, let's put the plots together
numSeqs_QC_dotplot + numRetained_QC_histplot + percSeqs_QC_histplot +
```
preQC_aggregate_plot / postQC_aggregate_plot
